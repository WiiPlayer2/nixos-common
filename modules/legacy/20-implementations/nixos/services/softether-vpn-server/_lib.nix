{ lib, config, ... }:
with lib;
{
  softetherConfigurationTypes = rec {
    value = types.submodule {
      options = {
        type = mkOption {
          type = types.enum [
            "bool"
            "uint"
            "uint64"
            "string"
            "byte"
          ];
        };
        data = mkOption {
          type = types.oneOf [
            types.bool
            types.ints.unsigned
            types.str
          ];
        };
        dataFile = mkOption {
          type = types.nullOr types.path;
          default = null;
        };
      };
    };
    section = types.submodule {
      options = {
        values = mkOption {
          type = types.attrsOf value;
          default = { };
        };
        sections = mkOption {
          type = types.attrsOf section;
          default = { };
        };
      };
    };
  };

  createConfigGenerationService =
    { component
    , description
    , configFile
    ,
    }:
    {
      description = "SoftEther ${description} config generation";
      after = [ "softether-init.service" ];
      requires = [ "softether-init.service" ];
      wantedBy = [ "${component}.service" ];
      serviceConfig = {
        Type = "oneshot";
        RemainAfterExit = false;
      };
      script =
        let
          createIndentString = indentLevel: concatStrings (map (x: "\t") (range 1 indentLevel));
          rootSection = config.services.softether.${component}.config;
          renderValue =
            { valueName
            , value
            , indentLevel ? 0
            , outFile
            ,
            }:
            let
              indentString = createIndentString indentLevel;
              render = text: ''
                echo -n '${indentString}${text}' >> '${outFile}'
                echo -n -e '\r\n' >> '${outFile}'
              '';
              renderDirectValue =
                if value.type == "bool" then
                  render "${value.type} ${valueName} ${boolToString value.data}"
                else
                  render "${value.type} ${valueName} ${toString value.data}";
              renderFileValue =
                if value.type == "byte" then
                  render "${value.type} ${valueName} $(cat '${dataFile}' | base64)"
                else
                  render "${value.type} ${valueName} $(cat '${dataFile}')";
            in
            if value.dataFile != null then renderFileValue else renderDirectValue;
          renderSection =
            { section
            , sectionName
            , indentLevel ? 0
            , outFile
            ,
            }:
            let
              indentString = createIndentString indentLevel;
              render = text: ''
                echo "${indentString}${text}" >> '${outFile}'
              '';
              sections = concatStringsSep "\n" (
                map
                  (
                    { name, value }:
                    renderSection {
                      inherit outFile;
                      sectionName = name;
                      section = value;
                      indentLevel = indentLevel + 1;
                    }
                  )
                  (attrsToList section.sections)
              );
              values = concatStringsSep "\n" (
                map
                  (
                    { name, value }:
                    renderValue {
                      inherit outFile;
                      valueName = name;
                      value = value;
                      indentLevel = indentLevel + 1;
                    }
                  )
                  (attrsToList section.values)
              );
              hasValuesAndSections =
                let
                  size = attrs: length (attrsToList attrs);
                in
                size section.values > 0 && size section.sections > 0;
            in
            ''
              ${render "declare ${sectionName}"}
              ${render "{"}
              ${values}
              ${if hasValuesAndSections then render "" else ""}
              ${sections}
              ${render "}"}
            '';
          outFile = "${config.services.softether.dataDir}/${component}/${configFile}";
          renderRootSection = renderSection {
            inherit outFile;
            sectionName = "root";
            section = rootSection;
          };
        in
        ''
          if [ ! -f '${outFile}.bak' ]; then
            mv '${outFile}' '${outFile}.bak'
          fi

          if [ -f '${outFile}' ]; then
            rm '${outFile}'
          fi

          echo "# Generated by NixOS configuration. Edits will be overwritten." > '${outFile}'
          ${renderRootSection}

          chmod 400 '${outFile}'
        '';
    };
}
