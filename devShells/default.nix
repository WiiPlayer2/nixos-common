{
  perSystem =
    { lib
    , config
    , pkgs
    , system
    , inputs'
    , ...
    }:
      with lib;
      {
        devShells.default =
          makeOverridable
            pkgs.mkShell
            {
              name = "nix-configs";
              packages = with pkgs; [
                config.agenix-rekey.package
                rage
                age-plugin-yubikey
                inputs'.deploy-rs.packages.default
                inputs'.disko.packages.default

                nix-update
                nix-diff

                (writeShellApplication {
                  name = "deploy-to";
                  runtimeInputs = [
                    inputs'.deploy-rs.packages.default
                  ];
                  text = ''
                    TARGET="$1"
                    shift
                    deploy --skip-checks .#"$TARGET" "$@" -- --override-input common path:"$FLAKE_ROOT"/flakes/common
                  '';
                })
                (writeShellApplication {
                  name = "build-nixos";
                  runtimeInputs = [
                    nix-output-monitor
                  ];
                  text = ''
                    TARGET="$1"
                    shift
                    nom build "$FLAKE_ROOT"#nixosConfigurations."$TARGET".config.system.build.toplevel --override-input common path:"$FLAKE_ROOT"/flakes/common "$@"
                  '';
                })
                (
                  let
                    createDefaultNix = writeShellApplication {
                      name = "create-default-nix";
                      text = ''
                        cat > default.nix << EOF
                        # DO NOT EDIT! This file was auto-generated by 'update-import-all-defaults' because the file '.nix-import-all' is inside this directory
                        {
                          imports = [
                        EOF

                        for file in ./*.nix ./.*.nix ./*/ ./.*/; do
                          if [ ! -e "$file" ] || [ "$file" == "./default.nix" ] || { [ -d "$file" ] && [ ! -f "$file/.nix-import-all" ] && [ ! -f "$file/default.nix" ]; }; then
                            continue
                          fi

                          echo "    ''${file%/}" >> default.nix
                        done

                        cat >> default.nix << EOF
                          ];
                        }
                        EOF

                        realpath default.nix
                      '';
                    };
                  in
                  writeShellApplication {
                    name = "update-import-all-defaults";
                    runtimeInputs = [
                      createDefaultNix
                    ];
                    text = ''
                      find "$FLAKE_ROOT" -name '.nix-import-all' -execdir create-default-nix \;
                    '';
                  }
                )
              ];
              shellHook = ''
                ${config.pre-commit.installationScript}
                export FLAKE_ROOT="$(pwd)"
              '';
            };
      };
}
